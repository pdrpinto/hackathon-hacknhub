#!/usr/bin/env python
"""
Script de teste para a API de Alertas com Impactos Cruzados
Execute: python test_alertas.py
"""

import requests
import json
from datetime import datetime

BASE_URL = 'http://localhost:5000/api/anomalias'

def print_section(title):
    """Print uma se√ß√£o formatada"""
    print('\n' + '='*80)
    print(f'  {title}')
    print('='*80 + '\n')

def test_alertas_completo():
    """Testa todos os endpoints de alertas"""
    
    print_section('üß™ TESTE: API de Alertas com Impactos Cruzados')
    print(f'‚è∞ Hora do teste: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n')
    
    # Teste 1: Listar todos os alertas
    print_section('1Ô∏è‚É£ Teste: Listar TODOS os alertas')
    try:
        response = requests.get(f'{BASE_URL}/alertas-impactos')
        data = response.json()
        
        print(f'‚úÖ Status Code: {response.status_code}')
        print(f'‚úÖ Total de alertas: {data["total"]}')
        print(f'‚úÖ Resumo:')
        print(f'   - Cr√≠ticos: {data["resumo"]["criticos"]}')
        print(f'   - Aten√ß√£o: {data["resumo"]["atencao"]}')
        print(f'   - Informativos: {data["resumo"]["informativos"]}')
        print(f'   - Anomalias Positivas: {data["resumo"]["anomalias_positivas"]}')
        print(f'   - Anomalias Negativas: {data["resumo"]["anomalias_negativas"]}')
        
        print(f'\nüìã Alertas encontrados:')
        for alerta in data['alertas']:
            print(f'   - [{alerta["id"]}] {alerta["titulo"]} ({alerta["severidade"]})')
            print(f'     ‚Üí Impactos: {len(alerta["impactos_esperados"])} m√©tricas afetadas')
    except Exception as e:
        print(f'‚ùå Erro: {str(e)}')
    
    # Teste 2: Filtrar por categoria
    print_section('2Ô∏è‚É£ Teste: Filtrar por categoria "economia"')
    try:
        response = requests.get(f'{BASE_URL}/alertas-impactos?categoria=economia')
        data = response.json()
        
        print(f'‚úÖ Status Code: {response.status_code}')
        print(f'‚úÖ Alertas de economia: {data["total"]}')
        print(f'‚úÖ Filtros aplicados: {data["filtros_aplicados"]}')
        
        for alerta in data['alertas']:
            print(f'   - {alerta["titulo"]}')
            print(f'     Varia√ß√£o: {alerta["variacao_percentual"]:+.1f}% | Desvio: {alerta["desvio_padrao"]}œÉ')
    except Exception as e:
        print(f'‚ùå Erro: {str(e)}')
    
    # Teste 3: Filtrar por severidade
    print_section('3Ô∏è‚É£ Teste: Filtrar por severidade "critico"')
    try:
        response = requests.get(f'{BASE_URL}/alertas-impactos?severidade=critico')
        data = response.json()
        
        print(f'‚úÖ Status Code: {response.status_code}')
        print(f'‚úÖ Alertas cr√≠ticos: {data["total"]}')
        
        for alerta in data['alertas']:
            print(f'\n   üî¥ {alerta["titulo"]}')
            print(f'   Descri√ß√£o: {alerta["descricao"][:100]}...')
            print(f'   A√ß√£o recomendada: {alerta["acao_recomendada"][:80]}...')
    except Exception as e:
        print(f'‚ùå Erro: {str(e)}')
    
    # Teste 4: Detalhes de um alerta espec√≠fico
    print_section('4Ô∏è‚É£ Teste: Detalhes do alerta #1')
    try:
        response = requests.get(f'{BASE_URL}/alertas-impactos/1')
        alerta = response.json()
        
        print(f'‚úÖ Status Code: {response.status_code}')
        print(f'‚úÖ Alerta: {alerta["titulo"]}')
        print(f'‚úÖ Categoria: {alerta["categoria"]} | Severidade: {alerta["severidade"]}')
        print(f'‚úÖ Valor esperado: {alerta["valor_esperado"]}')
        print(f'‚úÖ Valor detectado: {alerta["valor_detectado"]}')
        print(f'‚úÖ Varia√ß√£o: {alerta["variacao_percentual"]:+.1f}%')
        
        print(f'\nüìä Impactos Esperados:')
        for impacto in alerta['impactos_esperados']:
            direcao_emoji = 'üìà' if impacto['direcao'] == 'positivo' else 'üìâ' if impacto['direcao'] == 'negativo' else '‚û°Ô∏è'
            print(f'   {direcao_emoji} {impacto["metrica"]}')
            print(f'      ‚Ä¢ {impacto["descricao"]}')
            print(f'      ‚Ä¢ Impacto: {impacto["impacto_estimado"]} | Confian√ßa: {impacto["confianca"]} | Prazo: {impacto["prazo"]}')
    except Exception as e:
        print(f'‚ùå Erro: {str(e)}')
    
    # Teste 5: Categorias dispon√≠veis
    print_section('5Ô∏è‚É£ Teste: Listar categorias dispon√≠veis')
    try:
        response = requests.get(f'{BASE_URL}/categorias')
        data = response.json()
        
        print(f'‚úÖ Status Code: {response.status_code}')
        print(f'\nüìÇ Categorias:')
        for cat in data['categorias']:
            print(f'   - {cat["nome"]} (id: {cat["id"]})')
        
        print(f'\nüè∑Ô∏è  Severidades:')
        for sev in data['severidades']:
            print(f'   - {sev["nome"]} (id: {sev["id"]}, cor: {sev["cor"]})')
    except Exception as e:
        print(f'‚ùå Erro: {str(e)}')
    
    # Teste 6: Filtros combinados
    print_section('6Ô∏è‚É£ Teste: Filtros combinados (economia + aten√ß√£o)')
    try:
        response = requests.get(f'{BASE_URL}/alertas-impactos?categoria=economia&severidade=atencao')
        data = response.json()
        
        print(f'‚úÖ Status Code: {response.status_code}')
        print(f'‚úÖ Alertas encontrados: {data["total"]}')
        print(f'‚úÖ Filtros: {json.dumps(data["filtros_aplicados"], indent=2)}')
        
        for alerta in data['alertas']:
            print(f'\n   ‚ö†Ô∏è  {alerta["titulo"]}')
            print(f'      Per√≠odo: {alerta["periodo"]} | Detectado: {alerta["data_deteccao"]}')
            print(f'      Impactos: {len(alerta["impactos_esperados"])} m√©tricas afetadas')
    except Exception as e:
        print(f'‚ùå Erro: {str(e)}')
    
    print_section('‚úÖ TESTES CONCLU√çDOS')
    print('Todos os endpoints foram testados com sucesso!')
    print('A API de Alertas com Impactos Cruzados est√° funcionando corretamente.\n')


if __name__ == '__main__':
    try:
        test_alertas_completo()
    except requests.exceptions.ConnectionError:
        print('\n‚ùå ERRO: N√£o foi poss√≠vel conectar ao servidor.')
        print('   Certifique-se de que o backend est√° rodando em http://localhost:5000')
        print('\n   Execute: cd backend && python app.py\n')
    except Exception as e:
        print(f'\n‚ùå ERRO INESPERADO: {str(e)}\n')

